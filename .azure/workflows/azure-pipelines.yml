# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

parameters:
  - name: Proyecto
    type: string
    displayName: 'Seleccione proyecto'
    default: UserProfileService
    values:
    - UserProfileService
    - ContentManagementService

trigger: none

variables:
  planAndAppName: JJP-CONT-RECO-${{ parameters.Proyecto }}
  resourceGroup: jjpuente4
  appCsprojPath: apps/${{ parameters.Proyecto }}/${{ parameters.Proyecto }}.csproj
  testCsprojPath: tests/${{ parameters.Proyecto }}.Tests/${{ parameters.Proyecto }}.Tests.csproj


jobs:
- job: Validations
  displayName: Infrastructure Validation
  pool:
    name: Windows
  steps:
  - task: AzureCLI@2
    displayName: Validate If Infrastructure Exist
    inputs:
      azureSubscription: 'Azure Connection'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $planAndAppName = "$(planAndAppName)"
        $resourceGroup = "$(resourceGroup)"
        
        try {
          $plan = az appservice plan show -n $planAndAppName -g $resourceGroup --query "name" -o tsv
          if ($plan) {
            Write-Output "App Service Plan '$planAndAppName' already exists in resource group '$resourceGroup'."
            echo "PlanExists=true" >> $(Pipeline.Workspace)/variables.txt
          }
        } catch {
          Write-Output "App Service Plan '$planAndAppName' does not exist. Validation passed."
          echo "PlanExists=false" >> $(Pipeline.Workspace)/variables.txt
        }
        
        exit 0

- job: Infrastructure
  displayName: Set Up Infrastructure
  dependsOn: Validations
  condition: eq(variables['PlanExists'], 'false')
  pool:
    name: Windows
  steps:
  - task: AzureCLI@2
    displayName: Create App Service Plan & Web App
    inputs:
      azureSubscription: 'Azure Connection'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $planAndAppName = "$(planAndAppName)"
        $resourceGroup = "$(resourceGroup)"

        az appservice plan create -n $planAndAppName -g $resourceGroup --sku B1
        az webapp create -n $planAndAppName -p $planAndAppName -g $resourceGroup

- job: Deployment
  displayName: Build, Test and Deploy
  dependsOn:
  - Infrastructure
  condition: succeededOrFailed()
  pool:
    name: Windows
  steps:
  - task: DotNetCoreCLI@2
    displayName: Restore projects
    inputs:
      command: 'restore'
      projects: |
        $(appCsprojPath)
      feedsToUse: 'select'
  - task: DotNetCoreCLI@2
    displayName: Build project
    inputs:
      command: 'build'
      projects: $(appCsprojPath)
      arguments: '--no-restore'
  # - task: DotNetCoreCLI@2
  #   displayName: Test project
  #   condition: ${{ eq(parameters.Testing, true) }}
  #   inputs:
  #     command: 'test'
  #     projects: $(testCsprojPath)
  #     arguments: '--no-restore'
  - task: DotNetCoreCLI@2
    displayName: Publish project
    inputs:
      command: 'publish'
      projects: $(appCsprojPath)
      publishWebProjects: true
  - task: AzureRmWebAppDeployment@4
    displayName: Deploy project
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: 'Azure Connection'
      appType: 'webApp'
      WebAppName: '$(planAndAppName)'
      packageForLinux: '$(System.DefaultWorkingDirectory)/apps/${{ parameters.Proyecto }}/bin/Release/**/*.zip'
    
